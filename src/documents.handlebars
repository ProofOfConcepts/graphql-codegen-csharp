//

#region Query

// Query start 

namespace Generated
{
    public class Error
    {
        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("locations")]
        public Location[] Locations { get; set; }

        [JsonProperty("validationErrorType")]
        public string ValidationErrorType { get; set; }

        [JsonProperty("errorType")]
        public string ErrorType { get; set; }
    }

    public class Location 
    {
        [JsonProperty("line")]
        public int? Line { get; set; }

        [JsonProperty("column")]
        public int? Column { get; set; }
    }

    public class QueryInvocationException : Exception
    {
        public QueryInvocationException(string message, Error[] errors) : base(message)
        {
            Errors = errors;
        }

        public Error[] Errors { get; }
    }

    public sealed class Result<T> 
    {
        [JsonProperty("data")]
        public T Data { get; set; }

        [JsonProperty("error")]
        public string Error { get; set; }

        [JsonProperty("errors")]
        public Error[] Errors { get; set; }
    }

    public interface IQuery
    {
        string GetQueryText(JsonSerializerSettings jsonSerializerSettings = null);
        object GetParsedObject(string jsonText, JsonSerializerSettings jsonSerializerSettings = null);
    }

    public interface IQuery<out T> : IQuery
    {
        new T GetParsedObject(string jsonText, JsonSerializerSettings jsonSerializerSettings = null);
    }
}

#endregion 

{{#each operations }}

#region {{ toPascalCase name }} 

namespace Generated.{{ toPascalCase name }} 
{

    {{ toCsharpComment "Operation Type" }}
    public partial class {{ toPascalCase operationType }} : IQuery<Data>
    { 
        public {{ toPascalCase operationType }}({{{asArgumentList variables}}})
        {
      {{#each variables}}
            {{ toPascalCase name }} = {{ name }};
      {{/each}}
        }
        
        {{#each variables}}       
        public {{{ convertedType this }}} {{ toPascalCase name }} { get; }
        {{/each}}

        public virtual string GetQueryText(JsonSerializerSettings jsonSerializerSettings = null)
        {
            return JsonConvert.SerializeObject(new
            {
                query = @"{{asQueryUnescapedText document}}",
                variables = new {
{{#each variables}}                        {{ name }} = {{ toPascalCase name }}{{{ converterIfNeeded this }}},
{{/each}}
                    }
                }, jsonSerializerSettings);
            }  

            public virtual Data GetParsedObject(string jsonText, JsonSerializerSettings jsonSerializerSettings = null)
            {
                var result = JsonConvert.DeserializeObject<Result<Data>>(jsonText, jsonSerializerSettings);

                if (result.Error != null || result.Errors != null)
                {
                    throw new QueryInvocationException(result.Error ?? "Query Invocation Error", result.Errors ?? new Error[0]);
                }
                
                return result.Data;
            }

            string IQuery.GetQueryText(JsonSerializerSettings jsonSerializerSettings) => 
                GetQueryText(jsonSerializerSettings);
            Data IQuery<Data>.GetParsedObject(string jsonText, JsonSerializerSettings jsonSerializerSettings) => 
                GetParsedObject(jsonText, jsonSerializerSettings);
            object IQuery.GetParsedObject(string jsonText, JsonSerializerSettings jsonSerializerSettings) => 
                GetParsedObject(jsonText, jsonSerializerSettings);
        }

        public sealed class Data
        {
      {{#if hasFields}}    
            {{> selectionSet fields }}
      {{/if}}  
        }

        {{> fragments this }}
      {{#each innerModels }}
        {{ toCsharpComment "Inner Model" }} 
        public sealed class {{ modelType }} 
        {
      {{#if hasFields}}     
            {{> selectionSet fields }}
        }{{/if}}{{> fragments this }}
      {{/each}}
}

#endregion

{{/each}}

#region fragments

{{#each fragments }}

namespace Generated.{{name}} {
    public sealed class Fragment
    {
{{#if hasFields}} {
    {{> selectionSet fields }}
  }{{/if}}{{> fragments this }}
  {{#each innerModels }}

    public sealed class {{ modelType }} 
    {
{{#if hasFields}} { 
    {{> selectionSet fields }}
  }{{/if}}{{> fragments this }}
  {{/each}}
}
{{/each}}

#endregion
