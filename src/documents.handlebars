
using System;
using System.Collections.Generic;
using Newtonsoft.Json;

// Query start 

namespace Generated
{
    public interface IQuery
    {
        string GetQueryText();
        object GetParsedObject(string jsonText);
    }

    public interface IQuery<out T> : IQuery
    {
        new T GetParsedObject(string jsonText);
    }
}


{{#each operations }}
namespace Generated.{{ toPascalCase name }} 
{

    {{ toCsharpComment "Operation Type" }}
    public class {{ toPascalCase operationType }} : IQuery<Data>
    { 
        public {{ toPascalCase operationType }}({{asArgumentList variables}})
        {
      {{#each variables}}
            {{ toPascalCase name }} = {{ name }};
      {{/each}}
        }
        
        {{#each variables}}
        public {{ convertedType this }} {{ toPascalCase name }} { get; }
        {{/each}}

        public string GetQueryText()
        {
            return JsonConvert.SerializeObject(new
            {
                query = @"{{asQueryUnescapedText document}}",
                variables = new {
                        {{#each variables}}{{ name }} = _{{ name }},{{/each}}
                    }
                });
            }  

            public Data GetParsedObject(string jsonText)
            {
                return JsonConvert.DeserializeObject<Result>(jsonText).Data;
            }

            string IQuery.GetQueryText()
            {
                return GetQueryText();
            }

            Data IQuery<Data>.GetParsedObject(string jsonText)
            {
                return GetParsedObject(jsonText);
            }

            object IQuery.GetParsedObject(string jsonText)
            {
                return GetParsedObject(jsonText);
            }
        }

        public class Result
        {
            [JsonProperty("data")]
            public Data Data { get; set; }
        }

        public class Data
        {
      {{#if hasFields}}    
            {{> selectionSet fields }}
      {{/if}}  
        }

        {{> fragments this }}
      {{#each innerModels }}
        {{ toCsharpComment "Inner Model" }} 
        public class {{ modelType }} 
        {
      {{#if hasFields}}     
            {{> selectionSet fields }}
        }{{/if}}{{> fragments this }}
      {{/each}}
}

{{/each}}
{{#each fragments }}

namespace Generated.{{name}} {
    public class Fragment
    {
{{#if hasFields}} {
    {{> selectionSet fields }}
  }{{/if}}{{> fragments this }}
  {{#each innerModels }}

    public class {{ modelType }} 
    {
{{#if hasFields}} { 
    {{> selectionSet fields }}
  }{{/if}}{{> fragments this }}
  {{/each}}
}
{{/each}}

// Query end
